name: default

on: [push, pull_request]

jobs:
  lint-flake8:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/lint.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/lint.txt
    - name: Lint with flake8
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/flake8-matcher.json"
        fi
        python -m flake8 src tests setup.py

  lint-black:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/lint.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/lint.txt
    - name: Lint with black
      run: |
        python -m black --check src tests setup.py

  lint-isort:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/lint.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/lint.txt
    - name: Lint with isort
      run: |
        python -m isort --check src tests setup.py

  typecheck-mypy:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/typecheck.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/typecheck.txt
    - name: Type check with mypy
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/mypy-matcher.json"
        fi
        python -m mypy --no-color-output src/callosum

  test-unit:

    runs-on: ubuntu-latest

    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/test.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -e ".[build,test,zeromq,redis,thrift,snappy]"
    - name: Run unit tests
      run: |
        python -m pytest --cov tests
    - name: Upload coverage report
      uses: codecov/codecov-action@v3

  test-integration:

    runs-on: ubuntu-latest

    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/test.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -e ".[build,test,zeromq,redis,thrift,snappy]"
    - name: Run integration tests
      run: |
        ./scripts/run-integration-tests.sh

  deploy-to-pypi:
    needs: [lint-flake8, lint-black, lint-isort, typecheck-mypy, test-unit, test-integration]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    - name: Checkout
      uses: actions/checkout@v3
    - name: Fetch remote tags
      run: git fetch origin 'refs/tags/*:refs/tags/*' -f
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10.8"
        cache: pip
        cache-dependency-path: |
          setup.py
          requirements/build.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/build.txt
    - name: Build packages
      run: |
        python setup.py sdist bdist_wheel
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz
    - name: Extract the release changelog
      run: |
        python ./scripts/extract-release-changelog.py
        python ./scripts/determine-release-type.py
    - name: Release to GitHub
      uses: softprops/action-gh-release@v1
      with:
        body_path: "CHANGELOG_RELEASE.md"
        prerelease: ${{ env.IS_PRERELEASE }}
        files: |
          dist/*.tar.gz
          dist/*.whl
